=============================
Geospatial Sample Application
=============================

.. default-domain:: mongodb

.. code-block:: c++

   #include <iostream>
   #include <string>
   #include <utility>
   #include <vector>

   #include <bsoncxx/json.hpp>
   #include <mongocxx/client.hpp>
   #include <mongocxx/stdx.hpp>
   #include <mongocxx/uri.hpp>

   using bsoncxx::builder::stream::document;
   using bsoncxx::builder::stream::open_document;
   using bsoncxx::builder::stream::close_document;
   using bsoncxx::builder::stream::open_array;
   using bsoncxx::builder::stream::close_array;
   using bsoncxx::builder::stream::finalize;

   class Neighborhood {
   public:
       Neighborhood(const std::string& name,
                    const mongocxx::stdx::optional<bsoncxx::types::value> oid =
                        mongocxx::stdx::optional<bsoncxx::types::value>()):
           _name(name),
           _oid(oid) {}

       Neighborhood(Neighborhood&& other) {
           _name = other._name;
           _points = other._points;
           _oid = other._oid;
       }

       std::string name() const {
           return _name;
       }

       const std::vector<std::pair<double, double>>& geometry() const {
           return _points;
       }

       std::vector<std::pair<double, double>>& geometry() {
           return _points;
       }

   private:
       std::string _name;
       std::vector<std::pair<double, double>> _points;
       mongocxx::stdx::optional<bsoncxx::types::value> _oid;
   };

   class Restaurant {
   public:
       Restaurant(const std::string& name,
                  double latitude,
                  double longitude,
                  const mongocxx::stdx::optional<bsoncxx::types::value> oid =
                      mongocxx::stdx::optional<bsoncxx::types::value>()):
           _name(name),
           _latitude(latitude),
           _longitude(longitude),
           _oid(oid) {}

       std::string name() const {
           return _name;
       }

       double latitude() const {
           return _latitude;
       }

       double longitude() const {
           return _longitude;
       }

       bsoncxx::document::view_or_value serialize() const {
           auto doc = document{};
           if(_oid) {
               doc << "_id" << _oid.value();
           }
           doc << "location" << open_document
                   << "coordinates" << open_array
                       << _latitude << _longitude
                   << close_array
                   << "type" << "Point"
               << close_document
               << "name" << _name;
           return doc << finalize;
       }

       Restaurant with_id(const bsoncxx::types::value& id) const {
           return Restaurant(_name, _latitude, _longitude, id);
       }

   private:
       std::string _name;
       double _latitude;
       double _longitude;
       mongocxx::stdx::optional<bsoncxx::types::value> _oid;
   };

   class Geospatial {
   public:
       Geospatial(const mongocxx::uri& uri): _client(uri), _db(_client["test"]) {
           auto restaurants = _db["restaurants"];
           auto neighborhoods = _db["neighborhoods"];

           // Ensure that both collections have up-to-date geospatial indexes
           auto restaurants_index = document{} <<
               "location" << "2dsphere" << finalize;
           auto neighborhoods_index = document{} <<
               "geometry" << "2dsphere" << finalize;
           restaurants.create_index(std::move(restaurants_index));
           neighborhoods.create_index(std::move(neighborhoods_index));
       }

       Geospatial(mongocxx::client&& old) {
           _client = std::move(old);
       }

       // Return a neighborhood containing the given point.
       mongocxx::stdx::optional<Neighborhood> getNeighborhood(double latitude,
                                                              double longitude) {
           auto neighborhoods = _db["neighborhoods"];

           bsoncxx::document::value query_doc =
               document{} << "geometry" << open_document
                   << "$geoIntersects" << open_document
                       << "$geometry" << open_document
                           << "type" << "Point"
                           << "coordinates" << open_array
                                   << latitude << longitude
                               << close_array
                           << close_document
                       << close_document
                   << close_document
               << finalize;

           auto maybe_result = neighborhoods.find_one(std::move(query_doc));
           if(!maybe_result) { return mongocxx::stdx::optional<Neighborhood>(); }

           auto view = maybe_result->view();
           auto name = view["name"];
           auto id = view["_id"];

           if(!name || !id) {
               return mongocxx::stdx::optional<Neighborhood>();
           }

           Neighborhood neighborhood(name.get_utf8().value.to_string(),
                                     id.get_value());
           auto coordinates = view["geometry"]["coordinates"].
               get_array().value[0].get_array().value;
           for(auto raw_pair : coordinates) {
               auto pair = raw_pair.get_array().value;
               neighborhood.geometry().push_back(
                  std::pair<double, double>(
                      pair[0].get_double(),
                      pair[1].get_double()));
           }

           return mongocxx::stdx::optional<Neighborhood>();
       }

       Restaurant addRestaurant(const Restaurant& restaurant) {
           auto restaurants = _db["restaurants"];
           auto doc = restaurant.serialize();
           auto result = restaurants.insert_one(doc);

           return restaurant.with_id(result->inserted_id());
       }

   private:
       mongocxx::client _client;
       mongocxx::database _db;
   };

   int main(int argc, char** argv) {
       if(argc < 2) {
           std::cerr << "Usage: cxxexample <uri>\n";
           return 1;
       }

       mongocxx::uri uri(argv[1]);

       Geospatial geo(uri);
       auto neighborhood = geo.getNeighborhood(-73.93414657, 40.82302903);
       std::cout << neighborhood->geometry().size() << "\n";

       std::string name("Bob's Burgers");
       Restaurant restaurant = geo.addRestaurant(Restaurant(name, 1.0f, 0.0f));
       std::cout << bsoncxx::to_json(restaurant.serialize()) << "\n";

       return 0;
   }

